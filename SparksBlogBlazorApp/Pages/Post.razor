@page "/post/{id}"

@using Markdig;
@using SparksBlogBlazorApp.DataAccess;
@using SparksBlogBlazorApp.Models;
@using SparksBlogBlazorApp.Shared;

@inject IHostClient HostClient
@inject NavigationManager NavManager
@inject MarkdownPipeline MarkdownPipeline

<div class="container-fluid">
    <section id="article-title-section" class="row">
        <section class="col-md-12 text-center">
            @if (article == null)
            {
                <h1>Loading...</h1>
            }
            else
            {
                <h1>@article.Title</h1>
            }
        </section>
        @if (article != null)
        {
            <section class="col-md-12 text-center">
                <h3>Posted: @article.CreatedDate.ToString("MM/dd/yyyy")</h3>
            </section>
        }
    </section>

    @if (article != null)
    {
        <section id="article-content-section" class="row">
            <section class="col-md-8 offset-md-2">
                <div>
                    @((MarkupString)Markdown.Parse(article.Content, MarkdownPipeline).ToHtml())
                </div>
            </section>
        </section>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private Article? article;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var articlesResponse = await HostClient.GetArticleData();
            if (articlesResponse is null)
            {
                Console.WriteLine("Failed to retrieve articles!");
            }
            else
            {
                if (Id is not null)
                {
                    var articleData = articlesResponse.Articles.First(x => x.Id.ToLower() == Id.ToLower());
                    var articleContent = await HostClient.GetArticleContent(Id);
                    article = new Article
                        {
                            Title = articleData.Title,
                            CreatedDate = articleData.CreatedDate,
                            Content = articleContent,
                        };
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
}
